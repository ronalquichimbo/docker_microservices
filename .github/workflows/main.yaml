name: GitGuardian scan

on: [push, pull_request]

jobs:
  scanning:
    name: GitGuardian scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: GitGuardian scan
        uses: GitGuardian/ggshield/actions/secret@main
        with:
          args: -v
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
  lint_code:
    name: Lint Code Base
    runs-on: ubuntu-latest
    # needs: 
    #   - scnanning
    # if: needs.
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  python-lint:
    needs: lint_code
    runs-on: ubuntu-latest
    name: CI workflow
    steps:
    - name: checkout source repo
      uses: actions/checkout@main

    - name: linting
      uses: programmingwithalex/pylinter@main
      with:
        python-root: '.'
        flake8-flags: ''
        mypy-flags: ''
        fail-on-isort: false
        # skip-flake8: false
        # skip-mypy: false
        # skip-isort: false
        # mypy-ignore-dirs-files: ''
        # requirements-file: ''

    - name: commit isort changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A && git diff-index --cached --quiet HEAD || git commit -m 'isort'
    - name: push isort changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ github.ref }}





#  name: Build code, run unit test, run SAST, SCA, DAST security scans
# on: push

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     name: Run unit tests and SAST scan on the source code 
#     steps:
#     - uses: actions/checkout@v2
#     - name: Set up JDK 11
#       uses: actions/setup-java@v2
#       with:
#         java-version: '11'
#         distribution: 'temurin'
#         cache: maven
#     - name: Build with Maven cloud
#       run:  mvn -B verify sonar:sonar -Dsonar.projectKey=javaprojectreachability -Dsonar.organization=javaprojectreachability -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#   security:
#     runs-on: ubuntu-latest
#     needs: build
#     name: Run the SCA scan on the source code
#     steps:
#       - uses: actions/checkout@master
#       - name: RunSnyk to check for vulnerabilities
#         uses: snyk/actions/maven@master
#         continue-on-error: true
#         env:
#           SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#   zap_scan:
#     runs-on: ubuntu-latest
#     needs: security
#     name: Run DAST scan on the web application
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           ref: master
#       - name: ZAP Scan
#         uses: zaproxy/action-baseline@v0.6.1
#         with:
#           docker_name: 'owasp/zap2docker-stable'
#           target: 'http://testphp.vulnweb.com/'
#           rules_file_name: '.zap/rules.tsv'
#           cmd_options: '-a'       


